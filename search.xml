<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【RabbitMQ系列二】初识rabbitmq</title>
      <link href="/2018/10/14/article/2018/%E3%80%90RabbitMQ%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%91%E5%88%9D%E8%AF%86rabbitmq/"/>
      <url>/2018/10/14/article/2018/%E3%80%90RabbitMQ%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%91%E5%88%9D%E8%AF%86rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="【RabbitMQ系列二】初识rabbitmq"><a href="#【RabbitMQ系列二】初识rabbitmq" class="headerlink" title="【RabbitMQ系列二】初识rabbitmq"></a>【RabbitMQ系列二】初识rabbitmq</h1><h2 id="1-rabbitmq用户管理"><a href="#1-rabbitmq用户管理" class="headerlink" title="1 rabbitmq用户管理"></a>1 rabbitmq用户管理</h2><p>rabbitmq默认安装完只有guest一个用户，这个用户默认只能使用loalhost进行访问，我们如果想在自己的应用中使用mq需要创建新的用户，该小节主要描述rabbitmq的用户管理。</p><h3 id="1-1-用户管理"><a href="#1-1-用户管理" class="headerlink" title="1.1 用户管理"></a>1.1 用户管理</h3><ul><li>新增用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  add_user  [username]  [password]</span><br></pre></td></tr></table></figure><ul><li>查看所有用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  list_users</span><br></pre></td></tr></table></figure><ul><li><p>删除用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  delete_user  [username]</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  change_password  [username]  [newpassword]</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-角色管理"><a href="#1-2-角色管理" class="headerlink" title="1.2 角色管理"></a>1.2 角色管理</h3><p>rabbitmq的角色一共有五种，权限从高到低分别为：administrator、monitoring、policymaker、management、[other]</p><ul><li><p>administrator<br>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p>monitoring<br>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p>policymaker<br>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p>management<br>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p></li><li><p>other<br>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h4 id="1-2-1-操作角色"><a href="#1-2-1-操作角色" class="headerlink" title="1.2.1 操作角色"></a>1.2.1 操作角色</h4><ul><li>设置用户角色</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  set_user_tags  [user]  [Tag]</span><br></pre></td></tr></table></figure><h3 id="1-3-权限管理"><a href="#1-3-权限管理" class="headerlink" title="1.3 权限管理"></a>1.3 权限管理</h3><p>权限管理是设置用户对exchange和queen等的操作权限。</p><ul><li><p>设置权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p / root <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure></li><li><p>查看具体用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  list_user_permissions [user]</span><br></pre></td></tr></table></figure></li><li><p>查看具体path权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  list_permissions -p /</span><br></pre></td></tr></table></figure></li><li><p>清除用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  clear_permissions  [-p VHostPath]  [user]</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2 Hello World"></a>2 Hello World</h2><p>这里我们演示rabbitmq的hello world级别的demo,一方面可以验证rabbitmq的安装以及配置是否正确，另一方面也可以对rabbitmq整体有个把握。</p><ul><li>producer<br>这里生态者向rabbitmq发送一端hello world文本。代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.peihan.polaris.middleware.rabbitmq.first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHARGE_NAME = <span class="string">"exchage_demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">"routingkey_demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEEN_NAME = <span class="string">"queen_demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5672</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(IP);</span><br><span class="line">        connectionFactory.setPort(PORT);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.exchangeDeclare(EXCHARGE_NAME, <span class="string">"direct"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEEN_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(QUEEN_NAME, EXCHARGE_NAME, ROUTING_KEY);</span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        channel.basicPublish(EXCHARGE_NAME, ROUTING_KEY, MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后我们可以观察rabbitmq的监控面板，队列中已经有一条消息等待消费了。</p><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20181014-152046.png" alt></p><ul><li>消费者<br>消费者代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.peihan.polaris.middleware.rabbitmq.first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEEN_NAME = <span class="string">"queen_demo"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5672</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        Address[] addresses = <span class="keyword">new</span> Address[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Address(IP, PORT)</span><br><span class="line">        &#125;;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection(addresses);</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        channel.basicQos(<span class="number">64</span>);</span><br><span class="line">        com.rabbitmq.client.Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"recv message: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEEN_NAME, consumer);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行之后再观察监控面板，消息已经被消费掉了：<br><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20181014-152327.png" alt></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>本小节是对rabbit入门的开始，介绍了rabbit的用户管理以及hello world演示。</p><p>参考：<br>《rabbitmq实战指南》 中国工信出版社<br>《rabbitmq用户管理》<a href="https://my.oschina.net/hncscwc/blog/262246" target="_blank" rel="noopener">https://my.oschina.net/hncscwc/blog/262246</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy学习笔记</title>
      <link href="/2018/09/16/article/2018/SQLAlchemy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/16/article/2018/SQLAlchemy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQLAlchemy学习笔记"><a href="#SQLAlchemy学习笔记" class="headerlink" title="SQLAlchemy学习笔记"></a>SQLAlchemy学习笔记</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>SQLAlchemy是python的一个数据库ORM工具，可以让我们很方便的来操作数据库，既可以使用简单的sql语句来操作db,也可以使用类似于hibernate的ORM模式，满足我们的各种开发需求，本篇文章主要说明关于SQLAlchemy的使用相关。</p><p>官方地址： <a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">http://www.sqlalchemy.org/</a></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><ul><li><p>安装SQLAlchemy </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install SQLAlchemy</span><br></pre></td></tr></table></figure></li><li><p>安装mysql驱动</p></li></ul><p>如果仅仅是安装SQLAlchemy还是不能直接用的，需要有mysql的python连接驱动，类比于hibernate和JDBC的关系。</p><p>python的mysql驱动有好几个，我们这里顺手分析一下。</p><ol><li><p>MySQLdb<br>这是最远古的mysql驱动，使用c语言编写，已经在github很久没有更新了，不建议使用。如果在SQLAlchemy中没有指定使用的驱动的话，默认就是使用此驱动。</p></li><li><p>PyMySQL<br>pymsql是一个纯python编写的mysql驱动，可以用于python2.7和py3+，使用比较广泛，建议使用。搭配SQLAlchemy时需要使用mysql+pymysql来指定使用pymysql驱动</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure><ol start="3"><li>mysql-connector-python<br>mysql-connector-python是mysql官方出的纯python的mysql驱动，支持py2和py3，建议使用。搭配SQLArchemy使用时需要使用mysql+mysqlconnector来指定使用的驱动。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure><p>我这里选择使用pymsql</p><ul><li>准备一张表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">  <span class="keyword">id</span>         <span class="built_in">bigint</span>       <span class="keyword">not</span> <span class="literal">null</span>  auto_increment</span><br><span class="line">  <span class="keyword">comment</span> <span class="string">'id'</span>,</span><br><span class="line">  <span class="keyword">name</span>       <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">default</span> <span class="string">''</span></span><br><span class="line">  <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">  age        <span class="built_in">int</span>          <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">comment</span> <span class="string">'年龄'</span>,</span><br><span class="line">  birthday   <span class="built_in">timestamp</span>    <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">comment</span> <span class="string">'审核时间'</span>,</span><br><span class="line">  created_at <span class="built_in">TIMESTAMP</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">  <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  updated_at <span class="built_in">TIMESTAMP</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">  <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">  <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line"></span><br><span class="line">  primary <span class="keyword">key</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`ix_created_at`</span> (<span class="string">`created_at`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`ix_updated_at`</span> (<span class="string">`updated_at`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> = <span class="string">'用户信息表'</span></span><br></pre></td></tr></table></figure><ul><li>预插入两条数据<br>如图所示<br><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180916-213905.png" alt></li></ul><h2 id="2-不使用ORM模式"><a href="#2-不使用ORM模式" class="headerlink" title="2 不使用ORM模式"></a>2 不使用ORM模式</h2><p>SQLArchemy可以支持使用传统的模式来操作数据库。<br>db连接串格式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql+pymysql://root:root@localhost:3306/test</span><br></pre></td></tr></table></figure></p><ol><li>查询</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建engine连接</span></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from user"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> con:</span><br><span class="line">    rs = con.execute(sql)</span><br><span class="line">    <span class="comment"># 获取3条数据   fetchone() 获取一条数据</span></span><br><span class="line">    data = rs.fetchmany(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">print</span> type(data)</span><br><span class="line">    <span class="keyword">print</span> data[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>另一种查询写法，用for r in rs的迭代，比上一种性能要好，不用一直保持连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from user"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> con:</span><br><span class="line">    rs = con.execute(sql)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> rs:</span><br><span class="line">        <span class="keyword">print</span> type(r)</span><br><span class="line">        <span class="keyword">print</span> r.id</span><br><span class="line">        <span class="keyword">print</span> r.name</span><br></pre></td></tr></table></figure><ol start="2"><li>更新 删除 创建<br>C U D 可以通过占位符的方式来更优雅的实现</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">"select * from user"</span></span><br><span class="line">sql2 = <span class="string">"insert into user(name, age, birthday) values(:name, :age, :birthday)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> con:</span><br><span class="line">    rs = con.execute(text(sql2), name=<span class="string">'小王'</span>, age=<span class="number">34</span>, birthday=time.strftime(<span class="string">"2017-09-23"</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li>事务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> con:</span><br><span class="line">    trans = con.begin()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r1 = con.execute(sql1)</span><br><span class="line">        r2 = con.execute(text(sql2), name=<span class="string">'小啦啦'</span>, age=<span class="number">34</span>, birthday=time.strftime(<span class="string">"2017-09-25"</span>))</span><br><span class="line">        trans.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        trans.rollback()</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用session来操作数据库</li></ol><p>查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">"select * from user"</span></span><br><span class="line">sql2 = <span class="string">"insert into user(name, age, birthday) values(:name, :age, :birthday)"</span></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line">user_session = sessionmaker(bind=engine)</span><br><span class="line">session = user_session()</span><br><span class="line"></span><br><span class="line">rs = session.execute(sql1)</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> rs:</span><br><span class="line">    <span class="keyword">print</span> type(r)</span><br><span class="line">    <span class="keyword">print</span> r.name</span><br></pre></td></tr></table></figure></p><p>更新 删除 插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">sql1 = <span class="string">"select * from user"</span></span><br><span class="line">sql2 = <span class="string">"insert into user(name, age, birthday) values(:name, :age, :birthday)"</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line">user_session = sessionmaker(bind=engine)</span><br><span class="line">session = user_session()</span><br><span class="line"></span><br><span class="line">session.execute(sql2, &#123;<span class="string">"name"</span>: <span class="string">"小虎虎"</span>, <span class="string">"age"</span>: <span class="number">12</span>, <span class="string">"birthday"</span>: time.strftime(<span class="string">"2017-09-25"</span>)&#125;)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><p>注意： 使用session时，更新操作必须手动commit</p><h2 id="使用ORM模式"><a href="#使用ORM模式" class="headerlink" title="使用ORM模式"></a>使用ORM模式</h2><p>SQLAlchemy的最大亮点在于ORM模式，我们接下来来说明在ORM模式下如何操作数据库。</p><p>开始之前，我们都知道在ORM模式下，我们需要有个model来与数据库中的表对应，我们这里不需要手动来写model，python有工具可以自动生成model。</p><p>安装sqlacodegen</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sqlacodegen</span><br></pre></td></tr></table></figure><p>sqlacodegen用我们配置的db连接串就可以来生成整个db里的model类，每个表对应一个model类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlacodegen mysql+pymysql://root:root@localhost:3306/<span class="built_in">test</span> &gt; models.py</span><br></pre></td></tr></table></figure><p>生成的内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Date, String, TIMESTAMP, text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects.mysql <span class="keyword">import</span> BIGINT, INTEGER</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line">metadata = Base.metadata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line">    id = Column(BIGINT(<span class="number">20</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">128</span>), nullable=<span class="literal">False</span>, server_default=text(<span class="string">"''"</span>))</span><br><span class="line">    age = Column(INTEGER(<span class="number">11</span>), nullable=<span class="literal">False</span>, server_default=text(<span class="string">"'0'"</span>))</span><br><span class="line">    birthday = Column(TIMESTAMP, nullable=<span class="literal">False</span>, server_default=text(<span class="string">"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"</span>))</span><br><span class="line">    created_at = Column(TIMESTAMP, nullable=<span class="literal">False</span>, index=<span class="literal">True</span>, server_default=text(<span class="string">"CURRENT_TIMESTAMP"</span>))</span><br><span class="line">    updated_at = Column(TIMESTAMP, nullable=<span class="literal">False</span>, index=<span class="literal">True</span>, server_default=text(<span class="string">"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"</span>))</span><br></pre></td></tr></table></figure><p>我个人不喜欢将很多的逻辑放在db层来做，所以我们接下来只会展示简单的查询与更新，复杂查询建议在应用层进行，提高数据库的并发，不要将压力都集中到db层</p><p>以下的小例子都是比较常用的用法，日用应该足够了……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> config.db_config <span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, desc, distinct</span><br><span class="line"><span class="keyword">from</span> config.env_config <span class="keyword">import</span> env</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> model.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">engine = create_engine(test[env], echo=<span class="literal">True</span>)</span><br><span class="line">user_session = sessionmaker(bind=engine)</span><br><span class="line">session = user_session()</span><br><span class="line"></span><br><span class="line">time = time.strftime(<span class="string">"2017-09-25"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单条数据 first()</span></span><br><span class="line">qUser = session.query(User) \</span><br><span class="line">    .filter(User.id == <span class="number">1</span>) \</span><br><span class="line">    .first()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(qUser)</span><br><span class="line"><span class="keyword">print</span> qUser.id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个查询条件查询多条数据</span></span><br><span class="line">qUsers = session.query(User) \</span><br><span class="line">    .filter(User.id &lt; <span class="number">20</span>) \</span><br><span class="line">    .filter(User.name == <span class="string">"小火火"</span>) \</span><br><span class="line">    .order_by(desc(User.id)) \</span><br><span class="line">    .all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(qUsers)</span><br><span class="line"><span class="keyword">print</span> qUsers</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> qUsers:</span><br><span class="line">    <span class="keyword">print</span> user.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">user = User(name=<span class="string">"小火火"</span>, age=<span class="number">345</span>, birthday=time)</span><br><span class="line">session.add(user)</span><br><span class="line">session.commit()</span><br><span class="line"><span class="keyword">print</span> user.id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line"><span class="comment"># merge方法会判断主键，如果存在则更新，不存在则新建</span></span><br><span class="line">user.name = <span class="string">"小水水"</span></span><br><span class="line">session.merge(user)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge 新建</span></span><br><span class="line">user2 = User(name=<span class="string">"小土土"</span>, age=<span class="number">456</span>, birthday=time)</span><br><span class="line">session.merge(user2)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外一种更新方法，记得commit</span></span><br><span class="line">user3 = session.query(User) \</span><br><span class="line">    .filter(User.id == <span class="number">1</span>) \</span><br><span class="line">    .update(&#123;<span class="string">"name"</span>: <span class="string">"小兔兔兔兔图图图"</span>&#125;)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 生产环境不建议物理删除，可以使用逻辑删除，is_valid字段为0</span></span><br><span class="line">session.query(User) \</span><br><span class="line">    .filter(User.id == <span class="number">2</span>) \</span><br><span class="line">    .delete()</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据主键id单个查询数据</span></span><br><span class="line">user4 = session.query(User).get(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> user4.id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回结果集的index为 1 - 9</span></span><br><span class="line">users5 = session.query(User)[<span class="number">1</span>:<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users5:</span><br><span class="line">    <span class="keyword">print</span> user.id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查询 实际查询数据时 不建议一下查询大量数据，尽量使用分页查询来减小db的压力</span></span><br><span class="line">users6 = session.query(User) \</span><br><span class="line">    .offset(<span class="number">5</span>) \</span><br><span class="line">    .limit(<span class="number">10</span>) \</span><br><span class="line">    .all()</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users6:</span><br><span class="line">    <span class="keyword">print</span> user.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查询部分属性 注意在这种模式下查出来的对象的类型不是model的类型，而是sqlalchemy.util._collections.result 而且只有查询的字段才有值，</span></span><br><span class="line">users7 = session.query(User.name) \</span><br><span class="line">    .limit(<span class="number">5</span>) \</span><br><span class="line">    .all()</span><br><span class="line"><span class="keyword">print</span> type(users7)</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users7:</span><br><span class="line">    <span class="keyword">print</span> type(user)</span><br><span class="line">    <span class="keyword">print</span> user.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去重查询</span></span><br><span class="line">users8 = session.query(distinct(User.name).label(<span class="string">"name"</span>)) \</span><br><span class="line">    .all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(users8)</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users8:</span><br><span class="line">    <span class="keyword">print</span> user.name</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SQLAlchemy是python里比较好用的ORM框架，相信各位同学看了本文后对于SQLAlchemy应该算是入门，进阶请详细阅读官方文档说明。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动手自己搭建maven私服</title>
      <link href="/2018/08/11/article/2018/%E5%8A%A8%E6%89%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/"/>
      <url>/2018/08/11/article/2018/%E5%8A%A8%E6%89%8B%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BAmaven%E7%A7%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="动手自己搭建maven私服"><a href="#动手自己搭建maven私服" class="headerlink" title="动手自己搭建maven私服"></a>动手自己搭建maven私服</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>使用maven或者gradle来构建我们自己的java项目是目前的主流方式，平时我们使用的第三方的jar包大都来自maven中心仓库，有时候我们也想玩一把自己搭建一个maven仓库，即maven私服。目前搭建maven私服的主流工具为nexus,我们这次使用最新版的nexus来搭建自己的maven私服。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h2><p>官网（<a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">https://www.sonatype.com/nexus-repository-oss</a> ） 下载开源免费版本的nexus。我这里下载的是nexus-3.13.0-01-mac。</p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2 解压"></a>2 解压</h2><p>将下载好的文件解压到自定义目录。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>oracle jdbc驱动为什么不在中央仓库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【一起玩Netty（二）】动手用Netty实现HTTP Server</title>
      <link href="/2018/08/07/article/2018/%E3%80%90%E4%B8%80%E8%B5%B7%E7%8E%A9Netty%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%91%E5%8A%A8%E6%89%8B%E7%94%A8Netty%E5%AE%9E%E7%8E%B0HTTP-Server/"/>
      <url>/2018/08/07/article/2018/%E3%80%90%E4%B8%80%E8%B5%B7%E7%8E%A9Netty%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%91%E5%8A%A8%E6%89%8B%E7%94%A8Netty%E5%AE%9E%E7%8E%B0HTTP-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="【一起玩Netty（二）】动手用Netty实现HTTP-Server"><a href="#【一起玩Netty（二）】动手用Netty实现HTTP-Server" class="headerlink" title="【一起玩Netty（二）】动手用Netty实现HTTP Server"></a>【一起玩Netty（二）】动手用Netty实现HTTP Server</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><h2 id="1-V1版本"><a href="#1-V1版本" class="headerlink" title="1 V1版本"></a>1 V1版本</h2><p>用Netty来实现自己的HTTP Server是很容易的，Netty已经为我们提供了很多的工具类，编解码类，我们要做的就是将Netty为我们提供的ChannelHandler类加入ChannelPipeline。<br>我们要做的是如何从零来构建我们的HTTP Server，然后一步一步发现问题，并去完善。我们刚开始只选用HttpServerCodec这个server端的编码和解码Handler。HttpServerCodec相当于HttpRequestDecoder和HttpResponseEncoder。然后再添加一个自定义的Handler-HttpHandler。</p><h3 id="1-1-HttpServerInitializer"><a href="#1-1-HttpServerInitializer" class="headerlink" title="1.1 HttpServerInitializer"></a>1.1 HttpServerInitializer</h3><p>第一步我们先来实现我们的初始化类，为了代码更容易维护，我们没有选择使用匿名类而选择实现一个具名类。人狠话不多，直接看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">        ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//集合了编码器和解码器</span></span><br><span class="line">        channelPipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//自定义处理器</span></span><br><span class="line">        channelPipeline.addLast(<span class="keyword">new</span> HttpHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-HttpServer-启动类"><a href="#1-2-HttpServer-启动类" class="headerlink" title="1.2 HttpServer 启动类"></a>1.2 HttpServer 启动类</h3><p>第二步我们需要来编写一个启动类，来引导我们的Server启动。V1版本只是一个原型版本，我们对于异常处理不做要求，所以代码里可能对异常处理的不够完美，没事，我们慢慢来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动server</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> HttpServerInitializer());</span><br><span class="line">            Channel ch = b.bind(port).sync().channel();</span><br><span class="line">            ch.closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-HttpHandler-自定义处理类"><a href="#1-3-HttpHandler-自定义处理类" class="headerlink" title="1.3 HttpHandler 自定义处理类"></a>1.3 HttpHandler 自定义处理类</h3><p>最后一步，我们只需要编写自己的处理类，就可以大功告成了。<br>再编写代码之前，我们先来看点理论知识。<br>在Netty中，一个完整的http请求如下图所示：<br><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180807-233711.png" alt><br>所以在我们不采取特殊处理的时候，我们的Handler可能会多次触发，进行多次处理。我们来验证下。</p><p>v1版本我们不采取任何特殊处理，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HttpHandler.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] CONTENT = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">' '</span>, <span class="string">'W'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> keepAlive;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"class:&#123;&#125;"</span>, msg.getClass().getName());</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> HttpRequest) &#123;</span><br><span class="line"></span><br><span class="line">            HttpRequest request = (HttpRequest) msg;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.method() != HttpMethod.GET) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"请求不是GET请求."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HttpUtil.is100ContinueExpected(request)) &#123;</span><br><span class="line">                ctx.write(<span class="keyword">new</span> DefaultFullHttpResponse(HTTP_1_1, CONTINUE));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            keepAlive = HttpUtil.isKeepAlive(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> LastHttpContent) &#123;</span><br><span class="line"></span><br><span class="line">            FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HTTP_1_1, OK, Unpooled.wrappedBuffer(CONTENT));</span><br><span class="line">            response.headers().set(CONTENT_TYPE, <span class="string">"text/plain"</span>);</span><br><span class="line">            response.headers().set(CONTENT_LENGTH, response.content().readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!keepAlive) &#123;</span><br><span class="line">                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE);</span><br><span class="line">                ctx.writeAndFlush(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"channelReadComplete"</span>);</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"exceptionCaught"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cause.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ctx != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-4-UnitTest"><a href="#1-4-UnitTest" class="headerlink" title="1.4 UnitTest"></a>1.4 UnitTest</h3><p>我们接下来启动服务观察”class:{}”这行日志的打印次数。我们这里选择来写一个test来测试下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHttpServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HttpServer httpServer = <span class="keyword">new</span> HttpServer(<span class="number">8888</span>);</span><br><span class="line">    httpServer.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用postman发送一个最简单的get请求，日志输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">23:31:04.259 [nioEventLoopGroup-3-1] INFO  c.p.p.netty.http.v1.HttpHandler - class:io.netty.handler.codec.http.DefaultHttpRequest</span><br><span class="line">23:31:04.650 [nioEventLoopGroup-3-1] INFO  c.p.p.netty.http.v1.HttpHandler - class:io.netty.handler.codec.http.LastHttpContent$1</span><br><span class="line">23:31:05.201 [nioEventLoopGroup-3-1] INFO  c.p.p.netty.http.v1.HttpHandler - channelReadComplete</span><br></pre></td></tr></table></figure></p><p>我们可以很直观的看到class:{}这行日志一共输出了两次，说明请求两次经过我们的Handler，两次之后输出了channelReadComplete的日志，然后客户端postman收到了我们发回的HelloWorld字符串。<br>从这里，我们可以得出结论，http请求在netty中是被切割成多个部分进行传输的，这样对于我们的逻辑处理特别的不方便，我们将在V2版本里解决这个问题。</p><h2 id="2-V2版本"><a href="#2-V2版本" class="headerlink" title="2 V2版本"></a>2 V2版本</h2><p>这个版本我们来解决V1版本问题。<br>我们首先为HttpServerInitializer增加一个消息聚合器，现在代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">        ChannelPipeline channelPipeline = ch.pipeline();</span><br><span class="line">        <span class="comment">//集合了编码器和解码器</span></span><br><span class="line">        channelPipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">//消息聚合器</span></span><br><span class="line">        channelPipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line">        <span class="comment">//自定义处理器</span></span><br><span class="line">        channelPipeline.addLast(<span class="keyword">new</span> HttpHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后修改HttpHandler的代码如图所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">FullHttpRequest</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HttpHandler.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] CONTENT = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">' '</span>, <span class="string">'W'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'l'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, FullHttpRequest msg)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"class:&#123;&#125;"</span>, msg.getClass().getName());</span><br><span class="line">        <span class="keyword">boolean</span> keepAlive = HttpUtil.isKeepAlive(msg);</span><br><span class="line">        FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.wrappedBuffer(CONTENT));</span><br><span class="line">        response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class="string">"text/plain"</span>);</span><br><span class="line">        response.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());</span><br><span class="line">        <span class="keyword">if</span> (!keepAlive) &#123;</span><br><span class="line">            ctx.write(response).addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);</span><br><span class="line">            ctx.write(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"channelReadComplete"</span>);</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"exceptionCaught"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cause.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ctx != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在此处修改了泛型类型，有了消息聚合器后，我们只需要接受FullHttpRequest及其子类就可以了。</p><p>我们重新运行下，目前的日志输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00:09:10.968 [nioEventLoopGroup-3-1] INFO  c.p.p.netty.http.v2.HttpHandler - class:io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpRequest</span><br><span class="line">00:09:47.383 [nioEventLoopGroup-3-1] INFO  c.p.p.netty.http.v2.HttpHandler - channelReadComplete</span><br></pre></td></tr></table></figure></p><p>此时我们可以看到日志”class:{}”只输出了一次，说明请求只经过了一次我们的Handler。<br>而且我们通过调试可以观察到当执行了channelReadComplete中的ctx.flush()后我们的客户端才能获得response。</p><h2 id="3-小结"><a href="#3-小结" class="headerlink" title="3 小结"></a>3 小结</h2><p>至此我们已经实现了简单的HTTP Server，下一步我们将在此基础上实现我们自己的HTTP开发框架。</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【瞎扯设计模式】责任链模式</title>
      <link href="/2018/08/05/article/2018/%E3%80%90%E7%9E%8E%E6%89%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/08/05/article/2018/%E3%80%90%E7%9E%8E%E6%89%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>#【瞎扯设计模式】责任链模式</p><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>最近在看Netty，发现Netty中的ChannelPipeline和ChannelHandler是责任链模式的很好的应用。本文是对责任链模式的分析以及一个小例子来说明责任链模式。</p><h2 id="1-常用场景"><a href="#1-常用场景" class="headerlink" title="1 常用场景"></a>1 常用场景</h2><p>责任链模式常见应用场景为需要进行流式操作的场景。比如，审核流。常见场景为发起人发起采购申请，Director可以审核&lt;5000的采购单，VicePresident可以审核&lt;100000的采购单，President可以审核&lt;1000000的采购单。即整个处理过程可能会经过很多个不同的处理个体，在这种情况下，比较适合使用责任链模式。</p><h2 id="2-为什么"><a href="#2-为什么" class="headerlink" title="2 为什么"></a>2 为什么</h2><p>为什么要使用责任链模式，要回答这个问题我们先来看看，不使用责任链模式应该怎样描述这个过程。<br>不使用设计模式我们倾向于在一个处理类中来来处理前文提到的过程。大致代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PurchaseRequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlePurchaseRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">            handleByDirector(purchaseRequest);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">            handleByVicePresident(purchaseRequest);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">1000000</span>) &#123;</span><br><span class="line">            handleByPresident(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleByDirector</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleByVicePresident</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleByPresident</span><span class="params">(PurchaseRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//具体逻辑省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码即为不使用设计模式时的大概写法，在逻辑比较简单时，这种写法没有什么问题，当代码逻辑变的很复杂时，这种写法就会暴露很多问题。</p><ol><li>PurchaseRequestHandler这个类包含了整个的处理逻辑，当逻辑变得复杂时，这个类会变得过于复杂，不利于维护</li><li>目前审核顺序为Director -&gt; VP -&gt; President，当我们需要调整审核顺序或者增加审核职位时候，必须调整整个类的源码</li><li>这种写法审核流程顺序完全由PurchaseRequestHandler控制，调用方无法进行定制，牺牲了扩展性和灵活性</li></ol><h2 id="3-应该怎么做"><a href="#3-应该怎么做" class="headerlink" title="3 应该怎么做"></a>3 应该怎么做</h2><p>我个人很不喜欢谈设计模式上来直接先来一张UML图，很多时候我们对一种设计模式还不熟悉的时候，一张UML图会让我们更加的一头雾水。我们先来思考一下如何解决上面提到的问题。<br>为了解决问题1，我们首先可以拆解这个类，将每一个审核人都拆解为一个单独的类，这样的话，我们只需要单独的维护每一个职位。这样，我们可以拆解为Director、VicePresident、President三个类。<br>其实问题2和问题3的核心问题在于一点 ，我们如何将审核流的控制权从处理类中抽离出来，由调用方来决定具体的审核顺序。既然要调用方来决定审核顺序，那么必须有对应的方法或者途径让调用方来设置审核顺序，既审核链路。我们很自然的可以想到可以让每一个类都持有一个对更高一级审核人的引用。这样可以让调用方自由的组装审核链路，实现这一想法很简单，我们在上一步的三个类的基础上实现一个抽象类Approer，这个类中有processRequest方法来处理对应的请求，同时持有一个Approer对象的引用，用来将请求传递给下一级。这样Director、VicePresident、President这三个类分别继承Approer就可以了。调用方可以调用set方法来自定义自己的审核顺序。</p><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><p>根据上一节的叙述，我们首先来实现Approer,代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后继对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Approer successor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String template = <span class="string">"%s:%s审核了采购单:%s 金额:%s 目的:%s"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Approer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> purchaseRequest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title">void</span><span class="params">(PurchaseRequest purchaseRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Director、VicePresident、President这三个类分别继承Approer，并实现自己的处理逻辑。</p><p>Director<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Approer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">5000</span>) &#123;</span><br><span class="line">            System.out.println(String.format(template, <span class="string">"Director"</span>, <span class="keyword">this</span>.getName(), purchaseRequest.getId(), purchaseRequest.getAmount(), purchaseRequest.getPurpose()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.getSuccessor().processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>VicePresident<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VicePresident</span> <span class="keyword">extends</span> <span class="title">Approer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VicePresident</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">            System.out.println(String.format(template, <span class="string">"VP"</span>, <span class="keyword">this</span>.getName(), purchaseRequest.getId(), purchaseRequest.getAmount(), purchaseRequest.getPurpose()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.getSuccessor().processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">extends</span> <span class="title">Approer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">President</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(PurchaseRequest purchaseRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (purchaseRequest.getAmount() &lt; <span class="number">1000000</span>) &#123;</span><br><span class="line">            System.out.println(String.format(template, <span class="string">"President"</span>, <span class="keyword">this</span>.getName(), purchaseRequest.getId(), purchaseRequest.getAmount(), purchaseRequest.getPurpose()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.getSuccessor().processRequest(purchaseRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们再来编写调用方的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Approer a = <span class="keyword">new</span> Director(<span class="string">"a"</span>);</span><br><span class="line">    Approer b = <span class="keyword">new</span> VicePresident(<span class="string">"b"</span>);</span><br><span class="line">    Approer c = <span class="keyword">new</span> President(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">    a.setSuccessor(b);</span><br><span class="line">    b.setSuccessor(c);</span><br><span class="line"></span><br><span class="line">    PurchaseRequest pr1 = <span class="keyword">new</span> PurchaseRequest(<span class="number">1</span>, <span class="number">4000</span>, <span class="string">"购买倚天剑"</span>);</span><br><span class="line">    PurchaseRequest pr2 = <span class="keyword">new</span> PurchaseRequest(<span class="number">2</span>, <span class="number">60000</span>, <span class="string">"购买《葵花宝典》"</span>);</span><br><span class="line">    PurchaseRequest pr3 = <span class="keyword">new</span> PurchaseRequest(<span class="number">3</span>, <span class="number">800000</span>, <span class="string">"购买桃花岛"</span>);</span><br><span class="line"></span><br><span class="line">    a.processRequest(pr1);</span><br><span class="line">    a.processRequest(pr2);</span><br><span class="line">    a.processRequest(pr3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Director:a审核了采购单:1 金额:4000.0 目的:购买倚天剑</span><br><span class="line">VP:b审核了采购单:2 金额:60000.0 目的:购买《葵花宝典》</span><br><span class="line">President:c审核了采购单:3 金额:800000.0 目的:购买桃花岛</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>理解了代码实现之后，这时候我们可以来看看UML图是如何描述责任链模式的。</p><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180805-153759@2x.png" alt></p><p>在责任链模式里，很多对象由每一个对象对其下一级的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的调用方并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响调用方的情况下动态地重新组织链和分配责任。</p><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6 参考资料"></a>6 参考资料</h2><p><a href="https://legacy.gitbook.com/book/quanke/design-pattern-java/details" target="_blank" rel="noopener">https://legacy.gitbook.com/book/quanke/design-pattern-java/details</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>30分钟入门flex布局</title>
      <link href="/2018/07/29/article/2018/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8flex%E5%B8%83%E5%B1%80/"/>
      <url>/2018/07/29/article/2018/30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="30分钟入门flex布局"><a href="#30分钟入门flex布局" class="headerlink" title="30分钟入门flex布局"></a>30分钟入门flex布局</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>flex布局是目前比较流行的一种布局，对以前的box布局带来了很大的改进。如果你想优雅的进行页面布局，并且没有浏览器历史包袱，那么flex布局是一个很好的选择。本篇文章以一个小例子来说明flex布局。</p><h2 id="1-基本模板"><a href="#1-基本模板" class="headerlink" title="1 基本模板"></a>1 基本模板</h2><p>我们以一个魔方的面来说明flex布局。首先我们来写最基本的HTML模板。</p><p>模板效果：<br><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-215043.png" alt></p><p>完整HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0px;</span></span><br><span class="line"><span class="undefined">            padding: 0px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .box &#123;</span></span><br><span class="line"><span class="undefined">            margin: 50px auto;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            border: 4px solid red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .item &#123;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: lightblue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面我们为了节省篇幅，只写关键的css。</p><h2 id="2-一个方块"><a href="#2-一个方块" class="headerlink" title="2 一个方块"></a>2 一个方块</h2><h3 id="2-1-左对齐"><a href="#2-1-左对齐" class="headerlink" title="2.1 左对齐"></a>2.1 左对齐</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-215043.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    display: flex;  //只需这一行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-居中对齐"><a href="#2-2-居中对齐" class="headerlink" title="2.2 居中对齐"></a>2.2 居中对齐</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-221521.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    justify-content: center; //设定主轴居中对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3-居右对齐"><a href="#2-3-居右对齐" class="headerlink" title="2.3 居右对齐"></a>2.3 居右对齐</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-221803.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    justify-content: flex-end; //居右对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-4号位置"><a href="#2-4-4号位置" class="headerlink" title="2.4 4号位置"></a>2.4 4号位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222008.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    align-items: center;  //设定交叉轴的对齐方式 居中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-整体居中"><a href="#2-5-整体居中" class="headerlink" title="2.5 整体居中"></a>2.5 整体居中</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222202.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*主轴、交叉轴全部设定居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-6-6号位置"><a href="#2-6-6号位置" class="headerlink" title="2.6 6号位置"></a>2.6 6号位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222416.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/*主轴居右，交叉轴居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-7-7号位置"><a href="#2-7-7号位置" class="headerlink" title="2.7 7号位置"></a>2.7 7号位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222555.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="comment">/*主轴居左，交叉轴居下*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-8-8号位置"><a href="#2-8-8号位置" class="headerlink" title="2.8 8号位置"></a>2.8 8号位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222736.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="comment">/*主轴居中，交叉轴居下*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-9-9号位置"><a href="#2-9-9号位置" class="headerlink" title="2.9 9号位置"></a>2.9 9号位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-222900.png" alt><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">    <span class="comment">/*主轴居右，交叉轴居下*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-两个方块"><a href="#3-两个方块" class="headerlink" title="3 两个方块"></a>3 两个方块</h2><p>增加一个方块，我们需要再增加一个div元素，为了使方块间看的更加的清楚，我们给方块增加一个边框</p><h3 id="3-1-1-3-位置"><a href="#3-1-1-3-位置" class="headerlink" title="3.1 1 3 位置"></a>3.1 1 3 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-223533.png" alt><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="comment">/*等间距分割*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-2-1-7-位置"><a href="#3-2-1-7-位置" class="headerlink" title="3.2 1 7 位置"></a>3.2 1 7 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-223824.png" alt><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column; <span class="comment">/*将主轴方向改为y方向*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-2-8-位置"><a href="#3-3-2-8-位置" class="headerlink" title="3.3 2 8 位置"></a>3.3 2 8 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-224043.png" alt><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center; <span class="comment">/*交叉轴居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-3-9-位置"><a href="#3-3-3-9-位置" class="headerlink" title="3.3 3 9 位置"></a>3.3 3 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180729-224307.png" alt><br>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-end; <span class="comment">/*交叉轴居右*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-4-1-5-位置"><a href="#3-4-1-5-位置" class="headerlink" title="3.4 1 5 位置"></a>3.4 1 5 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180730-235329.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="comment">/*使用子类选择器改变子元素的交叉轴对齐方式*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-5-1-9-位置"><a href="#3-5-1-9-位置" class="headerlink" title="3.5 1 9 位置"></a>3.5 1 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180731-000204.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">    <span class="comment">/*使用子类选择器改变子元素的交叉轴对齐方式*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-三个方块"><a href="#4-三个方块" class="headerlink" title="4 三个方块"></a>4 三个方块</h2><p>在上一步的基础上再增加一个方块元素</p><h3 id="4-1-1-5-9-位置"><a href="#4-1-1-5-9-位置" class="headerlink" title="4.1 1 5 9 位置"></a>4.1 1 5 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180731-000714.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="comment">/*使用子类选择器改变子元素的交叉轴对齐方式*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-四个方块"><a href="#5-四个方块" class="headerlink" title="5 四个方块"></a>5 四个方块</h2><p>在上一步的基础上再增加一个方块</p><h3 id="5-1-1-2-3-9-位置"><a href="#5-1-1-2-3-9-位置" class="headerlink" title="5.1 1 2 3 9 位置"></a>5.1 1 2 3 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180731-001414.png" alt></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-2-四个角位置"><a href="#5-2-四个角位置" class="headerlink" title="5.2 四个角位置"></a>5.2 四个角位置</h3><p>此种布局不能直接实现，我们需要进行分组，将横向的两个方块看做一组，在外层包裹一层div，来实现四个角位置的布局。</p><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180731-002233.png" alt></p><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;   <span class="comment">/*此处需要指定宽度，否则column内两个方块不能撑满整个容器*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-六个方块"><a href="#6-六个方块" class="headerlink" title="6 六个方块"></a>6 六个方块</h2><p>我们在上一步的基础上重新增加两个方块</p><h3 id="6-1-1-2-3-7-8-9-位置"><a href="#6-1-1-2-3-7-8-9-位置" class="headerlink" title="6.1 1 2 3 7 8 9 位置"></a>6.1 1 2 3 7 8 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180801-001352.png" alt></p><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-1-3-4-6-7-9-位置"><a href="#6-2-1-3-4-6-7-9-位置" class="headerlink" title="6.2 1 3 4 6 7 9 位置"></a>6.2 1 3 4 6 7 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180801-001635.png" alt></p><p>.box {<br>    margin: 50px auto;<br>    height: 313px;<br>    width: 313px;<br>    border: 4px solid red;<br>    display: flex;<br>    flex-direction: column;<br>    flex-wrap: wrap;<br>    align-content: space-between;<br>}</p><h3 id="6-3-1-2-3-5-7-9-位置"><a href="#6-3-1-2-3-5-7-9-位置" class="headerlink" title="6.3 1 2 3 5 7 9 位置"></a>6.3 1 2 3 5 7 9 位置</h3><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180801-001635.png" alt></p><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*设定子容器的宽度很重要*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-九宫格"><a href="#7-九宫格" class="headerlink" title="7 九宫格"></a>7 九宫格</h2><p><img src="http://pc74c1zcq.bkt.clouddn.com/QQ20180801-002946.png" alt></p><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">313px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">4px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【ubuntu18.04折腾记】python开发环境搭建</title>
      <link href="/2018/07/21/article/2018/%E3%80%90ubuntu18.04%E6%8A%98%E8%85%BE%E8%AE%B0%E3%80%91python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/07/21/article/2018/%E3%80%90ubuntu18.04%E6%8A%98%E8%85%BE%E8%AE%B0%E3%80%91python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="【ubuntu18-04折腾记】python开发环境搭建"><a href="#【ubuntu18-04折腾记】python开发环境搭建" class="headerlink" title="【ubuntu18.04折腾记】python开发环境搭建"></a>【ubuntu18.04折腾记】python开发环境搭建</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>自从将主力机器切换到ubuntu18.04后越发喜欢linux系统的简洁以及命令行的强大，除了玩三男一狗以及大菠萝3之外，基本都是在用这台机器。ubuntu18.04折腾记主要记录自己折腾ubuntu18.04的过程。</p><h2 id="1-关于python"><a href="#1-关于python" class="headerlink" title="1 关于python"></a>1 关于python</h2><p>ubuntu18.04已经预装了python2.7和python3.6，我们无须再次安装python。</p><h2 id="2-关于pip"><a href="#2-关于pip" class="headerlink" title="2 关于pip"></a>2 关于pip</h2><p>ubuntu默认没有安装pip和pip3，所以我们需要手动安装pip和pip3<br>利用ubuntu的apt-get包管理工具我们可以很方便的安装。</p><ul><li>安装pip3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><ul><li>安装pip</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h2 id="3-安装python虚拟环境"><a href="#3-安装python虚拟环境" class="headerlink" title="3 安装python虚拟环境"></a>3 安装python虚拟环境</h2><p>python的第三方包真是不尽其数，如果我们能将第三方包安装到真实的python下则很容易造成冲突，所以使用python虚拟环境是一个不错的选择，方便进行环境的隔离和管理。</p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>接下来我们使用pip3来安装virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure><p>我在这里踩了两个坑。</p><p>第一个坑是输入命令之后终端提示”Missing dependencies for SOCKS support”</p><p>原因是我本地开了socks代理…… 解决办法把代理先暂时关闭……2333333333</p><p>第二个坑是一开始执行pip install 没有加sudo，导致安装完成后执行virtualenv 提示no command，再次提醒一定要加sudo</p><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>首先我们来创建一个不带任何第三方包的纯净的python3开发环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p py_env/py_3.6</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> py_env/py_3.6</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p /usr/bin/python3 --no-site-packages venv</span><br></pre></td></tr></table></figure><p>-p 参数指示使用的解释器版本<br>–no-site-packages 表示不使用系统中的包，即是完全纯净的环境<br>–system-site-packages 是使用系统中的包</p><p>创建python2的环境同理，只需要修改-p参数</p><h3 id="测试虚拟环境"><a href="#测试虚拟环境" class="headerlink" title="测试虚拟环境"></a>测试虚拟环境</h3><ul><li>启动虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>当终端的开头多了(venv)之后可以证明当前已经是在虚拟环境中了</p><ul><li>退出虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="4-安装pycharm"><a href="#4-安装pycharm" class="headerlink" title="4 安装pycharm"></a>4 安装pycharm</h2><p>工欲善其事必先利其器，安装好了python的虚拟运行环境后，我们再来安装pycharm。pycharm是我个人比较喜欢的python ide。在jetbrains官网下载*.tar.gz的压缩包。</p><ul><li><p>解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf *.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用chmod a + x 给解压后的文件夹下bin目录的pycharm.sh增加可执行性权限 </p></li></ul><ul><li>执行pycharm.sh即可以启动pycharm</li></ul><ul><li>为pycharm创建快捷方式</li></ul><p>在/usr/share/applications下新建pycharm.desktop文件，写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=pycharm</span><br><span class="line">Comment=Pycharm IDE</span><br><span class="line">Exec=/home/peihan/pycharm-2018.1.4/bin/pycharm.sh  //替换为实际路径</span><br><span class="line">Icon=/home/peihan/pycharm-2018.1.4/bin/pycharm.png  //替换为实际路径</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><h1 id="5-享受"><a href="#5-享受" class="headerlink" title="5 享受"></a>5 享受</h1><p>配置好以上之后，我们就可以使用python来愉快的开发了！</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【RabbitMQ系列一】ubuntu安装rabbitmq</title>
      <link href="/2018/07/19/article/2018/%E3%80%90RabbitMq%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%91ubuntu%E5%AE%89%E8%A3%85rabbitmq/"/>
      <url>/2018/07/19/article/2018/%E3%80%90RabbitMq%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%91ubuntu%E5%AE%89%E8%A3%85rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="【RabbitMQ系列一】ubuntu安装rabbitmq"><a href="#【RabbitMQ系列一】ubuntu安装rabbitmq" class="headerlink" title="【RabbitMQ系列一】ubuntu安装rabbitmq"></a>【RabbitMQ系列一】ubuntu安装rabbitmq</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>之前对于消息队列了解相对较少，这次想从头系统的学习下关于消息队列的相关内容，并记录下学习过程。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><p>我使用的机器系统为ubuntu 18.04，本文的安装都是基于这个版本。</p><ul><li>安装erlang<br>由于rabbitmq的服务端是用erlang开发的，所以首先要安装erlang的运行环境。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install erlang-nox</span><br></pre></td></tr></table></figure><ul><li>安装Rabbitmq</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rabbitmq-server</span><br></pre></td></tr></table></figure><ul><li>启动、停止、重启rabbitmq</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-server start</span><br><span class="line">sudo rabbitmq-server stop</span><br><span class="line">sudo rabbitmq-server restart</span><br></pre></td></tr></table></figure><h2 id="2-可能会遇到的问题"><a href="#2-可能会遇到的问题" class="headerlink" title="2 可能会遇到的问题"></a>2 可能会遇到的问题</h2><p>我在安装过程中遇到了两个问题，这里记录下问题以及解决方案。</p><ol><li>安装完成后不能启动</li></ol><p>终端报错信息为：“node with name “rabbit” already running on xxxx”</p><p>rabbitmq安装完成后自动启动某些进程，导致使用rabbitmq-server 无法启动</p><p>解决方案：</p><p>查看rabbit相关的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep <span class="string">'rabbit'</span></span><br></pre></td></tr></table></figure><p>kill掉与rabbit相关的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 [pid]</span><br></pre></td></tr></table></figure><ol start="2"><li>启动rabbitmq之后无法访问localhost:15672</li></ol><p>从rabbitmq的启动日志可以看到rabbitmq在启动时加载了几个插件，如果是加载了0个插件，则无法访问rabbitmq的管理控制台，因为没有安装相关的Web插件。</p><p>解决方案：安装Web插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p>之后打开浏览器输入 <a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a><br>默认用户名密码：guest/guest，就可以看到管理界面了。</p><p><img src="http://owgxabs76.bkt.clouddn.com/%E9%80%89%E5%8C%BA_003.png" alt></p><h2 id="3-docker安装运行"><a href="#3-docker安装运行" class="headerlink" title="3 docker安装运行"></a>3 docker安装运行</h2><p>原生安装rabbitmq较为复杂，需要准备erlang的运行环境，使用docker可以大大减小复杂度。从dockerhub拉取我们需要的镜像，后缀带management是管理控制台的imgae，我们这里使用带管理控制台的镜像。</p><p>启动运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit --name some-rabbit -p 15672:15672  -p  5672:5672 rabbitmq:3.7.7-management</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git代码回滚终极指南</title>
      <link href="/2018/07/16/article/2018/git%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/"/>
      <url>/2018/07/16/article/2018/git%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="git代码回滚终极指南"><a href="#git代码回滚终极指南" class="headerlink" title="git代码回滚终极指南"></a>git代码回滚终极指南</h1><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>git作为最受欢迎的版本控制工具，被很多开发者所喜欢。撤销回滚操作在git中是非常常用的操作。比如代码上线前需要删除掉其中的一个commit，排查线上代码需要临时增加一些log点，之后需要回退到之前的代码，针对不同的需求场景，需要使用不同的命令。本文从具体的实例出发，详细分析了不同的命令在不同场景下的用处。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="准备一个测试目录"><a href="#准备一个测试目录" class="headerlink" title="准备一个测试目录"></a>准备一个测试目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir git_exp</span><br></pre></td></tr></table></figure><h3 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="准备测试内容"><a href="#准备测试内容" class="headerlink" title="准备测试内容"></a>准备测试内容</h3><p>为了使我们的例子更加的简单易懂，我在master分支添加一个a.txt文件，并且提交四次修改。分别增加字母abcd，此时文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure><p>git log如图：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-210813.png" alt="git log"></p><h3 id="推到远程仓库进行备份"><a href="#推到远程仓库进行备份" class="headerlink" title="推到远程仓库进行备份"></a>推到远程仓库进行备份</h3><ul><li>关联远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add remote origin git@github.com:zhaipeihan/git_exp.git</span><br></pre></td></tr></table></figure><ul><li>推送到远程仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="2-git-reset"><a href="#2-git-reset" class="headerlink" title="2 git reset"></a>2 git reset</h2><p>git reset命令用于撤销commit，回退到某个版本上。</p><p>我们在之前master的基础上，创建reset_test分支进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b reset_test</span><br></pre></td></tr></table></figure><p>我们现在的git log为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d 75578cd7ae1a222c5fa745a0d2735a3448275a27</span><br><span class="line">c 076a714bed33fce4fa044b18b79f06f180ff3d97</span><br><span class="line">b d1e4634545ae8228556158734dc39e4783ec2d94</span><br><span class="line">a 739fe11e522ffca6c49061c9927e074d5ba3cbbd</span><br></pre></td></tr></table></figure><p>git reset命令常用参数有三个，影响程度从小到大为 –soft –mixed –hard<br>我们依次使用这三个命令来恢复到 b这个commit上</p><h3 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft d1e4634545ae8228556158734dc39e4783ec2d94</span><br></pre></td></tr></table></figure><p>此时git log为：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-221456.png" alt></p><p>git status:<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-222012.png" alt></p><p>文件内容：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-221943.png" alt></p><p>–soft参数回退到版本b的提交状态上了，但是保留了之后修改文件内容，只是未提交的状态</p><h3 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h3><p>我们使用之前的master分支来新建一个分支恢复到初始状态来测试–mixed</p><p>我们执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed d1e4634545ae8228556158734dc39e4783ec2d94</span><br></pre></td></tr></table></figure><p>执行之后的状态：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-223008.png" alt></p><p>–mixed参数同样恢复到版本b提交状态上了，也同样保留了之后修改的文件内容，与–soft不同的是，–mixed还没有提交到缓存区。</p><h3 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h3><p>我们使用之前的master分支来新建一个分支恢复到初始状态来测试–hard</p><p>我们执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard d1e4634545ae8228556158734dc39e4783ec2d94</span><br></pre></td></tr></table></figure><p>执行之后的状态：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180716-223514.png" alt></p><p>–hard同样也恢复到了版本b的提交状态上了，但是–hard丢弃了工作区和缓存区的所有内容，所以之后修改的文件内容并没有保存，使用–hard需要慎重，确定不需要保留之后的修改内容之后再使用。</p><h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p>git reset 命令用来回退到某个版本上，其常用的–soft –mixed –hard三个参数对应了不同的修改场景，需要根据具体场景来选择。git reset是一个“危险的”操作，它可能会导致你永久的丢失提交记录。需要注意的是，本地仓库可以用reset来进行回退;如果commit已经push到自己的远程仓库，在reset回退之后，需要git push -f强制覆盖远程分支，否则因为缺少了后面的commit会造成冲突；如果是多人共享的公司远程仓库，建议不要使用reset进行回退版本，因为你回退了版本，会和别人的本地或者他人自己的远程仓库产生冲突，造成不必要的麻烦，如果需要回退共享仓库的版本应该使用下边分析的git revert。</p><h2 id="3-git-revert"><a href="#3-git-revert" class="headerlink" title="3 git revert"></a>3 git revert</h2><p>git reset是直接删除了需要撤销的操作，这是比较危险的操作，git revert是在当前提交之后自动生成一个逆向的提交来达到回滚的效果。</p><p>我们在前面小节的基础上增加b.txt c.txt d.txt三个文件分别进行3次提交，现在的项目结构为：</p><p><img src="http://owgxabs76.bkt.clouddn.com/WX20180717-134819@2x.png" alt></p><p>git log记录为：<br><img src="http://owgxabs76.bkt.clouddn.com/WX20180717-135001@2x.png" alt></p><p>接下来我们使用git revert来撤销add b file这个提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert 3a1252d048bdd12cae8f1668584bc196428a1072</span><br></pre></td></tr></table></figure><p>执行后的目录结构：</p><p><img src="http://owgxabs76.bkt.clouddn.com/QQ20180717-195444@2x.png" alt><br>执行后的git log记录：<br><img src="http://owgxabs76.bkt.clouddn.com/QQ20180717-195428@2x.png" alt></p><p>通过结果可以看到add b file这个操作已经被撤销，b.txt这个文件已经消失，并且commit历史中新增了一个commit。</p><p>git revert [commit1] [commit2] 可以撤销commit1到commit2之间的所有的提交</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>git revert命令是在当前的节点上向后生成了新的commit来撤销之前的操作，之前的commit并不会被删除，如果要撤销已经push到远程仓库的commit建议使用git revert,这是一个安全的操作，在后续的合并分支时不会产生冲突。</p><h2 id="3-git-rebase"><a href="#3-git-rebase" class="headerlink" title="3 git rebase"></a>3 git rebase</h2><p>git rebase用来重新编排所有的commit,此处可以用来撤销某个commit。我们此处还是以上一小节的例子来说明git rebase。</p><p>目前的项目结构和git log如上一小节执行git revert之后的状态所示。</p><p>此时我们进行一个撤销add c file的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i 3a1252d048bdd12cae8f1668584bc196428a1072</span><br></pre></td></tr></table></figure><p>注意使用git rebase 输入的commit版本号是想要撤销的commit的上一个commit号</p><p>执行该命令后，会出现一个类似交互式的界面，如图：</p><p><img src="http://owgxabs76.bkt.clouddn.com/QQ20180717-201421@2x.png" alt></p><p>我们将想要删除的commit改为 drop 然后保存退出。</p><p>执行之后的目录结果为：<br><img src="http://owgxabs76.bkt.clouddn.com/QQ20180717-201625@2x.png" alt></p><p>add c file的操作已经被撤销，git log 如图：<br><img src="http://owgxabs76.bkt.clouddn.com/QQ20180717-201733@2x.png" alt></p><p>我们可以看到 add c file的操作已经直接被撤销了，并且没有生成新的提交记录。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>利用git rebase可以达到和git revert相同的效果，主要区别在于git rebase不会生成新的commit。</p><h2 id="4-git-checkout"><a href="#4-git-checkout" class="headerlink" title="4 git checkout"></a>4 git checkout</h2><p>以上提到的都是提交层面的撤销操作，如果是想对未add到缓存区的内容做撤销操作，使用git checkout [filename]</p><p>如果已经add到缓存区，使用git checkout 并没有效果。此时可以使用git reset来回溯到上一个提交点。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>以上我们分析了每一个命令对应的不同的撤销的场景，简单来说，改动未add到缓存区可以使用git checkout来放弃修改；已经提交commit，但是commit未push到远程仓库，可以使用reset来回到某个commit，如果是想删除某个特定的commit,可以使用rebase来操作；如果commit已经推送到远程仓库，建议使用git revert来撤销其中的操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10分钟利用github + hexo搭建个人blog</title>
      <link href="/2018/07/10/article/2018/10%E5%88%86%E9%92%9F%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/"/>
      <url>/2018/07/10/article/2018/10%E5%88%86%E9%92%9F%E5%88%A9%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/</url>
      
        <content type="html"><![CDATA[<h1 id="10分钟利用github-hexo搭建个人blog"><a href="#10分钟利用github-hexo搭建个人blog" class="headerlink" title="10分钟利用github + hexo搭建个人blog"></a>10分钟利用github + hexo搭建个人blog</h1><p>本文主要记录使用hexo来搭建基于github的个人blog</p><h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0 准备工作"></a>0 准备工作</h2><ul><li><p>github账号 (github.com/zhaipeihan)</p></li><li><p>简单了解node.js npm</p></li><li><p>好奇的心</p></li></ul><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1 创建仓库"></a>1 创建仓库</h2><p>在github上创建一个username.github.io的仓库（username为你自己的用户名）</p><h2 id="2-hexo初始化"><a href="#2-hexo初始化" class="headerlink" title="2 hexo初始化"></a>2 hexo初始化</h2><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li>初始化项目文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="3-初步预览"><a href="#3-初步预览" class="headerlink" title="3 初步预览"></a>3 初步预览</h2><p>页面生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>本地预览（默认 localhost:4000/ ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="4-部署到github上"><a href="#4-部署到github上" class="headerlink" title="4 部署到github上"></a>4 部署到github上</h2><p>项目的根目录下有_config.yml，这是hexo的主要配置文件，我们首先要将我们的github账户使用ssh方式配置上去，我的配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:zhaipeihan/zhaipeihan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>先清理下，防止各种问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>生成并上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>此处上传至github时可能报”ERROR Deployer not found: git”错误 解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>等待生成页面上传之后就可以访问username.github.io来看到自己的博客了</p><h2 id="5-使用主题"><a href="#5-使用主题" class="headerlink" title="5 使用主题"></a>5 使用主题</h2><p>主题爱好因人而异，我这里选择的是Archer（ github.com/fi3ework/hexo-theme-archer ）</p><p>接下来的配置过程都是基于Archer主题。主题安装方法见github说明。</p><h2 id="6-其他配置"><a href="#6-其他配置" class="headerlink" title="6 其他配置"></a>6 其他配置</h2><p>接下来说明如何使用hexo的提供的分类和标签功能。</p><h3 id="6-1-分类"><a href="#6-1-分类" class="headerlink" title="6.1 分类"></a>6.1 分类</h3><p>新建一个页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> new page categories</span><br></pre></td></tr></table></figure><p>根据生成的路径找到上一步生成的文件，修改其中的内容，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-07-12 13:28:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以后在写文章的时候在文章顶部增加（注意格式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 小玩意</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小玩意 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
